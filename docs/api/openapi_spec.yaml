openapi: 3.0.0
info:
  title: NutriTrack Pro API
  version: v1.0.0
  description: |-
    API para la aplicación NutriTrack Pro, destinada a profesionales de la nutrición y el entrenamiento.
    Permite gestionar pacientes, crear y asignar planes de dieta y entrenamiento,
    realizar seguimiento biométrico y comunicarse con los pacientes.
  contact:
    name: Soporte NutriTrack Pro
    email: soporte@example.com # Reemplazar con email real si aplica

servers:
  - url: http://localhost:3000/api # Puerto por defecto es 3000
    description: Servidor de desarrollo local
  - url: https://api.nutritrackpro.com/api # URL de producción (ejemplo)
    description: Servidor de producción

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Auth Schemas
    ProfessionalRegistration:
      type: object
      required:
        - firstName
        - lastName
        - email
        - password
        - profession
      properties:
        firstName:
          type: string
          example: "Jane"
        lastName:
          type: string
          example: "Doe"
        email:
          type: string
          format: email
          example: "jane.doe@example.com"
        password:
          type: string
          format: password
          example: "S3cur3P@ss!"
        phone:
          type: string
          example: "+1234567890"
        profession:
          type: string
          enum: ["NUTRITIONIST", "TRAINER"]
          example: "NUTRITIONIST"
    ProfessionalLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "jane.doe@example.com"
        password:
          type: string
          format: password
          example: "S3cur3P@ss!"
    AuthResponse:
      type: object
      properties:
        token:
          type: string
          example: "jwt.token.here"
        user:
          type: object
          properties:
            id:
              type: integer
              example: 1
            firstName:
              type: string
              example: "Jane"
            lastName:
              type: string
              example: "Doe"
            email:
              type: string
              format: email
              example: "jane.doe@example.com"
            profession:
              type: string
              example: "NUTRITIONIST"

    # Patient Schemas
    PatientCreation:
      type: object
      required:
        - firstName
        - lastName
      properties:
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        phone:
          type: string
          example: "+1234567890"
        birthDate:
          type: string
          format: date
          example: "1990-01-15"
        gender:
          type: string
          example: "Masculino"
        height:
          type: number
          format: float
          description: "Altura en cm"
          example: 175.5
        initialBiometrics:
          type: object
          properties:
            recordDate:
              type: string
              format: date
              example: "2023-11-20"
            weight: 
              type: number
              format: float
              example: 70.2
            bodyFatPercentage: 
              type: number
              format: float
              example: 15.5
            musclePercentage:
              type: number
              format: float
              example: 40.0
            waterPercentage:
              type: number
              format: float
              example: 60.0
            backChestDiameter:
              type: number
              format: float
              example: 100.0
            waistDiameter:
              type: number
              format: float
              example: 80.0
            armsDiameter:
              type: number
              format: float
              example: 35.0
            legsDiameter:
              type: number
              format: float
              example: 55.0
            calvesDiameter:
              type: number
              format: float
              example: 38.0
            notes:
              type: string
              example: "Medición inicial."
        medicalNotes:
          type: string
          example: "Alergia a la penicilina."
        dietRestrictions:
          type: string
          example: "Intolerancia a la lactosa."
        objectives:
          type: string
          example: "Perder 5kg y mejorar resistencia."
    PatientResponse:
      allOf:
        - $ref: '#/components/schemas/PatientCreation'
        - type: object
          properties:
            id:
              type: integer
              example: 1
            professionalId:
              type: integer
              example: 1
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time
    PatientListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/PatientResponse'
        pagination:
          type: object
          properties:
            total: { type: integer, example: 100 }
            page: { type: integer, example: 1 }
            limit: { type: integer, example: 10 }
            totalPages: { type: integer, example: 10 }

    # Biometric Record Schemas
    BiometricRecordCreation:
      type: object
      required:
        - recordDate
      properties:
        recordDate:
          type: string
          format: date
          example: "2023-10-26"
        weight: { type: number, format: float, example: 69.5 }
        bodyFatPercentage: { type: number, format: float, example: 15.0 }
        musclePercentage: { type: number, format: float, example: 40.0 }
        waterPercentage: { type: number, format: float, example: 60.0 }
        backChestDiameter: { type: number, format: float, example: 100.0 }
        waistDiameter: { type: number, format: float, example: 80.0 }
        armsDiameter: { type: number, format: float, example: 35.0 }
        legsDiameter: { type: number, format: float, example: 55.0 }
        calvesDiameter: { type: number, format: float, example: 38.0 }
        notes: { type: string, example: "Medición post-ayuno." }
    BiometricRecordResponse:
      allOf:
        - $ref: '#/components/schemas/BiometricRecordCreation'
        - type: object
          properties:
            id: { type: integer, example: 1 }
            patientId: { type: integer, example: 1 }
            createdAt: { type: string, format: date-time }

    # Diet Plan Schemas
    DietMealCreation:
      type: object
      required:
        - mealType
        - content
        - dayOfWeek
      properties:
        mealType: 
          type: string
          enum: ["BREAKFAST", "MID_MORNING_SNACK", "LUNCH", "AFTERNOON_SNACK", "DINNER", "LATE_NIGHT_SNACK"]
          example: "BREAKFAST"
        content: 
          type: string
          example: "Avena con frutas y nueces."
        dayOfWeek:
          type: string
          enum: ["MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"]
          example: "MONDAY"
    DietPlanCreation:
      type: object
      required:
        - title
      properties:
        title: { type: string, example: "Plan Pérdida de Grasa Sem1" }
        description: { type: string, example: "Plan enfocado en déficit calórico." }
        startDate: { type: string, format: date, example: "2023-11-01" }
        endDate: { type: string, format: date, example: "2023-11-07" }
        objectives: { type: string, example: "Reducir 1kg de grasa." }
        isActive: { type: boolean, example: true }
        notes: { type: string, example: "Beber 2L de agua al día." }
        meals:
          type: array
          items:
            $ref: '#/components/schemas/DietMealCreation'
    DietPlanResponse:
      allOf:
        - $ref: '#/components/schemas/DietPlanCreation'
        - type: object
          properties:
            id: { type: integer, example: 1 }
            patientId: { type: integer, example: 1 }
            professionalId: { type: integer, example: 1 }
            isDeleted: { type: boolean, example: false }
            deletedAt: { type: string, format: date-time, nullable: true }
            meals:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/DietMealCreation'
                  - type: object
                    properties:
                      id: { type: integer, example: 1 }
            createdAt: { type: string, format: date-time }
            updatedAt: { type: string, format: date-time }

    # PDF Schemas
    PdfGenerationRequest:
      type: object
      properties:
        dietPlanId:
          type: string
          nullable: true
          example: "1"
        workoutPlanId:
          type: string
          nullable: true
          example: "1"

    # Email Schemas
    SendEmailRequest:
      type: object
      required:
        - recipientEmail
        - subject
      properties:
        dietPlanId:
          type: string
          nullable: true
          example: "1"
        workoutPlanId:
          type: string
          nullable: true
          example: "1"
        recipientEmail:
          type: string
          format: email
          example: "patient.email@example.com"
        subject:
          type: string
          example: "Tus planes de NutriTrack Pro"
        bodyMessage:
          type: string
          nullable: true
          example: "Hola John, aquí tienes tus planes actualizados."

    # General Error Schema
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          example: "Error de validación"
        errors:
          type: array
          items:
            type: object
            properties:
              field: { type: string, example: "email" }
              message: { type: string, example: "El email ya está registrado." }

security:
  - bearerAuth: []

paths:
  # --- Auth Endpoints ---
  /auth/register:
    post:
      summary: Registro de Nuevo Profesional
      tags: [Auth]
      security: [] # Sin autenticación requerida
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfessionalRegistration'
      responses:
        '201':
          description: Profesional registrado exitosamente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: { type: integer }
                  firstName: { type: string }
                  lastName: { type: string }
                  email: { type: string }
                  profession: { type: string }
        '400':
          description: Error de validación
          content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } }
        '409':
          description: Email ya registrado
          content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } }
        '500':
          description: Error interno del servidor
          content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } }

  /auth/login:
    post:
      summary: Inicio de Sesión del Profesional
      tags: [Auth]
      security: [] # Sin autenticación requerida
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfessionalLogin'
      responses:
        '200':
          description: Inicio de sesión exitoso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Error de validación
          content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } }
        '401':
          description: Credenciales inválidas
          content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } }
        '500':
          description: Error interno del servidor
          content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } }

  # --- Patient Endpoints ---
  /patients:
    post:
      summary: Registro de Nuevo Paciente
      tags: [Patients]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatientCreation'
      responses:
        '201':
          description: Paciente creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientResponse'
        '400': { description: "Error de validación", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '401': { description: "No Autorizado", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '500': { description: "Error interno del servidor", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
    get:
      summary: Listar/Buscar Pacientes
      tags: [Patients]
      security:
        - bearerAuth: []
      parameters:
        - name: search
          in: query
          description: Término de búsqueda para nombre, apellido o email
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: Número de página para paginación
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Número de resultados por página
          required: false
          schema:
            type: integer
            default: 10
        - name: sortBy
          in: query
          description: Campo por el cual ordenar
          required: false
          schema:
            type: string
        - name: order
          in: query
          description: Orden (asc, desc)
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: asc
      responses:
        '200':
          description: Lista de pacientes obtenida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientListResponse'
        '401': { description: "No Autorizado", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '500': { description: "Error interno del servidor", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }

  /patients/{patientId}:
    get:
      summary: Obtener Detalles del Paciente
      tags: [Patients]
      security:
        - bearerAuth: []
      parameters:
        - name: patientId
          in: path
          required: true
          description: ID del paciente
          schema:
            type: integer
      responses:
        '200':
          description: Detalles del paciente obtenidos
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PatientResponse'
                  - type: object
                    properties:
                      lastBiometricRecord: 
                        allOf:
                          - $ref: '#/components/schemas/BiometricRecordResponse'
                          - type: object
                            nullable: true
                      dietPlansSummary: 
                        type: array
                        items: 
                          type: object
                          properties: 
                            id: {type: integer}
                            title: {type: string}
                            isActive: {type: boolean}
                      workoutPlansSummary: 
                        type: array
                        items: 
                          type: object
                          properties: 
                            id: {type: integer}
                            title: {type: string}
                            isActive: {type: boolean}
        '401': { description: "No Autorizado", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '403': { description: "Prohibido", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '404': { description: "Paciente no encontrado", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '500': { description: "Error interno del servidor", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
    put:
      summary: Actualizar Información del Paciente
      tags: [Patients]
      security:
        - bearerAuth: []
      parameters:
        - name: patientId
          in: path
          required: true
          description: ID del paciente a actualizar
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName: { type: string }
                lastName: { type: string }
                email: { type: string, format: email }
                phone: { type: string }
                birthDate: { type: string, format: date }
                gender: { type: string }
                height: { type: number, format: float }
                medicalNotes: { type: string }
                dietRestrictions: { type: string }
                objectives: { type: string }
      responses:
        '200':
          description: Paciente actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientResponse'
        '400': { description: "Error de validación", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '401': { description: "No Autorizado", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '403': { description: "Prohibido", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '404': { description: "Paciente no encontrado", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '500': { description: "Error interno del servidor", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }

  # --- Biometric Record Endpoints ---
  /patients/{patientId}/biometric-records:
    post:
      summary: Registro de Nuevas Medidas Biométricas
      tags: [BiometricRecords]
      security:
        - bearerAuth: []
      parameters:
        - name: patientId
          in: path
          required: true
          description: ID del paciente
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BiometricRecordCreation'
      responses:
        '201':
          description: Registro biométrico creado
          content: { application/json: { schema: { $ref: '#/components/schemas/BiometricRecordResponse' } } }
        '400': { description: "Error de validación", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '401': { description: "No Autorizado", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '403': { description: "Prohibido", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '404': { description: "Paciente no encontrado", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '500': { description: "Error interno del servidor", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
    get:
      summary: Obtener Registros Biométricos del Paciente
      tags: [BiometricRecords]
      security:
        - bearerAuth: []
      parameters:
        - name: patientId
          in: path
          required: true
          description: ID del paciente
          schema:
            type: integer
        - name: startDate
          in: query
          description: Fecha de inicio para filtrar registros
          required: false
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          description: Fecha de fin para filtrar registros
          required: false
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Lista de registros biométricos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BiometricRecordResponse'
        '400': { description: "Error de validación", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '401': { description: "No Autorizado", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '403': { description: "Prohibido", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '404': { description: "Paciente no encontrado", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '500': { description: "Error interno del servidor", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }

  # --- Diet Plan Endpoints ---
  /diets/patients/{patientId}/plans:
    post:
      summary: Crear Plan de Dieta para Paciente
      tags: [DietPlans]
      security:
        - bearerAuth: []
      parameters:
        - name: patientId
          in: path
          required: true
          description: ID del paciente para el cual se crea el plan
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DietPlanCreation'
      responses:
        '201':
          description: Plan de dieta creado
          content: { application/json: { schema: { $ref: '#/components/schemas/DietPlanResponse' } } }
        '400': { description: "Error de validación", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '401': { description: "No Autorizado", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '403': { description: "Prohibido", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '404': { description: "Paciente no encontrado", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '500': { description: "Error interno del servidor", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }

  /diets/{dietPlanId}:
    get:
      summary: Obtener Detalles de un Plan de Dieta
      tags: [DietPlans]
      security:
        - bearerAuth: []
      parameters:
        - name: dietPlanId
          in: path
          required: true
          description: ID del plan de dieta
          schema:
            type: integer
      responses:
        '200':
          description: Detalles del plan de dieta
          content: { application/json: { schema: { $ref: '#/components/schemas/DietPlanResponse' } } }
        '401': { description: "No Autorizado", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '403': { description: "Prohibido", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '404': { description: "Plan de dieta no encontrado", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '500': { description: "Error interno del servidor", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
    put:
      summary: Actualizar Plan de Dieta
      tags: [DietPlans]
      security:
        - bearerAuth: []
      parameters:
        - name: dietPlanId
          in: path
          required: true
          description: ID del plan de dieta a actualizar
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title: { type: string }
                description: { type: string }
                startDate: { type: string, format: date }
                endDate: { type: string, format: date }
                objectives: { type: string }
                isActive: { type: boolean }
                notes: { type: string }
                meals:
                  type: array
                  items:
                    $ref: '#/components/schemas/DietMealCreation'
      responses:
        '200':
          description: Plan de dieta actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DietPlanResponse'
        '400': { description: "Error de validación", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '401': { description: "No Autorizado", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '403': { description: "Prohibido", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '404': { description: "Plan de dieta no encontrado", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '500': { description: "Error interno del servidor", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
    delete:
      summary: Eliminar Plan de Dieta (Soft Delete)
      tags: [DietPlans]
      security:
        - bearerAuth: []
      parameters:
        - name: dietPlanId
          in: path
          required: true
          description: ID del plan de dieta a eliminar
          schema:
            type: integer
      responses:
        '200':
          description: Plan de dieta eliminado exitosamente
        '401': { description: "No Autorizado", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '403': { description: "Prohibido", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '404': { description: "Plan de dieta no encontrado", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '500': { description: "Error interno del servidor", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }

  # --- PDF Endpoints ---
  /patients/{patientId}/combined-pdf:
    post:
      summary: Generar PDF Combinado de Planes
      tags: [PDF]
      security:
        - bearerAuth: []
      parameters:
        - name: patientId
          in: path
          required: true
          description: ID del paciente
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PdfGenerationRequest'
      responses:
        '200':
          description: PDF generado exitosamente
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '400': { description: "Error de validación", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '401': { description: "No Autorizado", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '403': { description: "Prohibido", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '404': { description: "Paciente no encontrado", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '500': { description: "Error interno del servidor", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }

  # --- Email Endpoints ---
  /patients/{patientId}/send-plans-email:
    post:
      summary: Envío de Correo Electrónico con Planes
      tags: [Email]
      security:
        - bearerAuth: []
      parameters:
        - name: patientId
          in: path
          required: true
          description: ID del paciente
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailRequest'
      responses:
        '200':
          description: Correo electrónico enviado exitosamente
        '400': { description: "Error de validación", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '401': { description: "No Autorizado", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '403': { description: "Prohibido", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '404': { description: "Paciente no encontrado", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '500': { description: "Error interno del servidor", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } } 