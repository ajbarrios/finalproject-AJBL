openapi: 3.0.0
info:
  title: NutriTrack Pro API
  version: v1.0.0
  description: |-
    API para la aplicación NutriTrack Pro, destinada a profesionales de la nutrición y el entrenamiento.
    Permite gestionar pacientes, crear y asignar planes de dieta y entrenamiento,
    realizar seguimiento biométrico y comunicarse con los pacientes.
  contact:
    name: Soporte NutriTrack Pro
    email: soporte@example.com # Reemplazar con email real si aplica

servers:
  - url: http://localhost:3000/api # Puerto por defecto es 3000
    description: Servidor de desarrollo local
  - url: https://api.nutritrackpro.com/api # URL de producción (ejemplo)
    description: Servidor de producción

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Auth Schemas
    ProfessionalRegistration:
      type: object
      required:
        - fullName
        - email
        - password
        - profession
      properties:
        fullName:
          type: string
          example: "Dr. Jane Doe"
        email:
          type: string
          format: email
          example: "jane.doe@example.com"
        password:
          type: string
          format: password
          example: "S3cur3P@ss!"
        profession:
          type: string
          enum: ["nutricionista", "entrenador"]
          example: "nutricionista"
    ProfessionalLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "jane.doe@example.com"
        password:
          type: string
          format: password
          example: "S3cur3P@ss!"
    ForgotPassword:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          example: "jane.doe@example.com"
    ResetPassword:
      type: object
      required:
        - token
        - newPassword
      properties:
        token:
          type: string
          example: "reset-token-uuid"
        newPassword:
          type: string
          format: password
          example: "NewS3cur3P@ss!"
    AuthResponse:
      type: object
      properties:
        token:
          type: string
          example: "jwt.token.here"
        user:
          type: object
          properties:
            id:
              type: string # o integer
              example: "user-uuid"
            fullName:
              type: string
              example: "Dr. Jane Doe"
            email:
              type: string
              format: email
              example: "jane.doe@example.com"
            profession:
              type: string
              example: "nutricionista"

    # Patient Schemas
    PatientCreation:
      type: object
      required:
        - firstName
        - lastName
      properties:
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        phone:
          type: string
          example: "+1234567890"
        birthDate:
          type: string
          format: date
          example: "1990-01-15"
        gender:
          type: string
          enum: ["Masculino", "Femenino", "Otro", "Prefiero no decirlo"]
          example: "Masculino"
        height:
          type: number
          format: float
          description: "Altura en cm"
          example: 175.5
        initialBiometrics: # Opcional, para el primer registro
          type: object
          properties:
            weight: { type: number, format: float, example: 70.2 }
            bodyFatPercentage: { type: number, format: float, example: 15.5 }
            # ... otros campos biométricos iniciales
        medicalNotes:
          type: string
          example: "Alergia a la penicilina."
        dietRestrictions:
          type: string
          example: "Intolerancia a la lactosa."
        objectives:
          type: string
          example: "Perder 5kg y mejorar resistencia."
    PatientResponse: # Similar a PatientCreation pero con ID y timestamps
      allOf:
        - $ref: '#/components/schemas/PatientCreation'
        - type: object
          properties:
            id:
              type: string # o integer
              example: "patient-uuid"
            professionalId:
              type: string # o integer
              example: "prof-uuid"
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time
    PatientListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/PatientResponse' # o una versión simplificada
        pagination:
          type: object
          properties:
            total: { type: integer, example: 100 }
            page: { type: integer, example: 1 }
            limit: { type: integer, example: 10 }
            totalPages: { type: integer, example: 10 }

    # Biometric Record Schemas
    BiometricRecordCreation:
      type: object
      required:
        - recordDate
        # Al menos una medida
      properties:
        recordDate:
          type: string
          format: date
          example: "2023-10-26"
        weight: { type: number, format: float, example: 69.5 }
        bodyFatPercentage: { type: number, format: float, example: 15.0 }
        musclePercentage: { type: number, format: float, example: 40.0 }
        waterPercentage: { type: number, format: float, example: 60.0 }
        backChestDiameter: { type: number, format: float, example: 100.0 }
        waistDiameter: { type: number, format: float, example: 80.0 }
        armsDiameter: { type: number, format: float, example: 35.0 }
        legsDiameter: { type: number, format: float, example: 55.0 }
        calvesDiameter: { type: number, format: float, example: 38.0 }
        notes: { type: string, example: "Medición post-ayuno." }
    BiometricRecordResponse:
      allOf:
        - $ref: '#/components/schemas/BiometricRecordCreation'
        - type: object
          properties:
            id: { type: string, example: "biometric-uuid" }
            patientId: { type: string, example: "patient-uuid" }
            createdAt: { type: string, format: date-time }

    # Diet Plan Schemas
    DietMealCreation:
      type: object
      required:
        - mealType
        - content
      properties:
        mealType: { type: string, example: "Desayuno" }
        content: { type: string, example: "Avena con frutas y nueces." }
    DietPlanCreation:
      type: object
      required:
        - title
      properties:
        title: { type: string, example: "Plan Pérdida de Grasa Sem1" }
        description: { type: string, example: "Plan enfocado en déficit calórico." }
        startDate: { type: string, format: date, example: "2023-11-01" }
        endDate: { type: string, format: date, example: "2023-11-07" }
        objectives: { type: string, example: "Reducir 1kg de grasa." }
        status: { type: string, enum: ["Activo", "Borrador"], example: "Activo"}
        notes: { type: string, example: "Beber 2L de agua al día." }
        meals:
          type: array
          items:
            $ref: '#/components/schemas/DietMealCreation'
    DietPlanResponse: # Similar a DietPlanCreation pero con IDs y meals completos
      allOf:
        - $ref: '#/components/schemas/DietPlanCreation' # Excluyendo 'meals' si se devuelven con IDs
        - type: object
          properties:
            id: { type: string, example: "dietplan-uuid" }
            patientId: { type: string, example: "patient-uuid" }
            professionalId: { type: string, example: "prof-uuid" }
            meals: # meals con sus IDs
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/DietMealCreation'
                  - type: object
                    properties:
                      id: { type: string, example: "dietmeal-uuid" }
            createdAt: { type: string, format: date-time }
            updatedAt: { type: string, format: date-time }

    # Workout Plan Schemas
    ExerciseCreation:
      type: object
      required:
        - name
        - setsReps
      properties:
        name: { type: string, example: "Press de Banca" }
        setsReps: { type: string, example: "4x10" }
        observations: { type: string, example: "Controlar la bajada." }
    WorkoutDayCreation:
      type: object
      required:
        - dayOfWeek # o name
        - exercises
      properties:
        dayOfWeek: { type: string, example: "Lunes" } # o "Día 1"
        description: { type: string, example: "Entrenamiento de Pecho y Tríceps" }
        exercises:
          type: array
          items:
            $ref: '#/components/schemas/ExerciseCreation'
    WorkoutPlanCreation:
      type: object
      required:
        - title
      properties:
        title: { type: string, example: "Plan Fuerza Hipertrofia Mes 1" }
        description: { type: string, example: "Rutina de 3 días enfocada en básicos." }
        startDate: { type: string, format: date, example: "2023-11-01" }
        endDate: { type: string, format: date, example: "2023-11-30" }
        objectives: { type: string, example: "Aumentar fuerza en básicos." }
        status: { type: string, enum: ["Activo", "Borrador"], example: "Activo"}
        notes: { type: string, example: "Calentar 10 min antes." }
        days:
          type: array
          items:
            $ref: '#/components/schemas/WorkoutDayCreation'
    WorkoutPlanResponse: # Similar a WorkoutPlanCreation pero con IDs
      allOf:
        - $ref: '#/components/schemas/WorkoutPlanCreation' # Excluyendo 'days'
        - type: object
          properties:
            id: { type: string, example: "workoutplan-uuid" }
            patientId: { type: string, example: "patient-uuid" }
            professionalId: { type: string, example: "prof-uuid" }
            days: # days con sus IDs y exercises con sus IDs
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/WorkoutDayCreation' # Excluyendo 'exercises'
                  - type: object
                    properties:
                      id: { type: string, example: "workoutday-uuid" }
                      exercises:
                        type: array
                        items:
                          allOf:
                            - $ref: '#/components/schemas/ExerciseCreation'
                            - type: object
                              properties:
                                id: { type: string, example: "exercise-uuid" }
            createdAt: { type: string, format: date-time }
            updatedAt: { type: string, format: date-time }

    # PDF & Email Schemas
    CombinedPdfRequest:
      type: object
      properties:
        dietPlanId:
          type: string
          nullable: true
          example: "dietplan-uuid"
        workoutPlanId:
          type: string
          nullable: true
          example: "workoutplan-uuid"
    SendEmailRequest:
      allOf:
        - $ref: '#/components/schemas/CombinedPdfRequest' # Reutiliza la selección de planes
        - type: object
          required:
            - recipientEmail
            - subject
          properties:
            recipientEmail:
              type: string
              format: email
              example: "patient.email@example.com"
            subject:
              type: string
              example: "Tus planes de NutriTrack Pro"
            bodyMessage:
              type: string
              nullable: true
              example: "Hola John, aquí tienes tus planes actualizados."

    # General Error Schema
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          example: "Error de validación"
        errors: # Opcional, para errores de validación detallados
          type: array
          items:
            type: object
            properties:
              field: { type: string, example: "email" }
              message: { type: string, example: "El email ya está registrado." }

security:
  - bearerAuth: [] # Aplica JWT a todos los endpoints por defecto

paths:
  # --- Auth Endpoints ---
  /auth/register:
    post:
      summary: HU-001 Registro de Nuevo Profesional
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfessionalRegistration'
      responses:
        '201':
          description: Profesional registrado exitosamente.
          content:
            application/json:
              schema: # Podría ser un subconjunto de AuthResponse sin el token
                type: object
                properties:
                  id: { type: string }
                  fullName: { type: string }
                  email: { type: string }
                  profession: { type: string }
        '400':
          description: Error de validación (ej. email inválido, campos faltantes).
          content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } }
        '409':
          description: Conflicto, el email ya está registrado.
          content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } }
        '500':
          description: Error interno del servidor.
          content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } }

  /auth/login:
    post:
      summary: HU-002 Inicio de Sesión del Profesional
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfessionalLogin'
      responses:
        '200':
          description: Inicio de sesión exitoso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Error de validación (ej. campos vacíos).
          content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } }
        '401':
          description: Credenciales inválidas (email no encontrado o contraseña incorrecta).
          content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } }
        '500':
          description: Error interno del servidor.
          content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } }

  /auth/forgot-password:
    post:
      summary: HU-003 Solicitud de Recuperación de Contraseña
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPassword'
      responses:
        '200':
          description: Solicitud procesada. Si el email existe, se enviará un enlace.
        '400':
          description: Error de validación (ej. email inválido).
          content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } }
        '500':
          description: Error interno del servidor.
          content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } }

  /auth/reset-password:
    post:
      summary: HU-003 Restablecimiento de Contraseña
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPassword'
      responses:
        '200':
          description: Contraseña restablecida exitosamente.
        '400':
          description: Token inválido/expirado o contraseña no cumple criterios.
          content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } }
        '500':
          description: Error interno del servidor.
          content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } }

  /auth/logout:
    post:
      summary: HU-004 Cerrar Sesión del Profesional (Opcional, si se usa blacklisting de tokens)
      tags: [Auth]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Sesión cerrada exitosamente.
        '401':
          description: No autorizado (token no válido o no proporcionado).
          content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } }
        '500':
          description: Error interno del servidor.
          content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } }

  # --- Patient Endpoints ---
  /patients:
    post:
      summary: HU-005 Registro de Nuevo Paciente
      tags: [Patients]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatientCreation'
      responses:
        '201':
          description: Paciente creado exitosamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientResponse'
        '400': { description: "Error de validación.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '401': { description: "No Autorizado.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '500': { description: "Error interno del servidor.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
    get:
      summary: HU-008 Visualización del Dashboard Principal (Listar/Buscar Pacientes)
      tags: [Patients]
      security:
        - bearerAuth: []
      parameters:
        - name: search
          in: query
          description: Término de búsqueda para nombre, apellido o email.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: Número de página para paginación.
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Número de resultados por página.
          required: false
          schema:
            type: integer
            default: 10
        - name: sortBy
          in: query
          description: Campo por el cual ordenar (ej. name, createdAt).
          required: false
          schema:
            type: string
        - name: order
          in: query
          description: Orden (asc, desc).
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: asc
      responses:
        '200':
          description: Lista de pacientes obtenida.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientListResponse'
        '401': { description: "No Autorizado.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '500': { description: "Error interno del servidor.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }

  /patients/{patientId}:
    get:
      summary: HU-009 Visualización del Perfil Detallado del Paciente
      tags: [Patients]
      security:
        - bearerAuth: []
      parameters:
        - name: patientId
          in: path
          required: true
          description: ID del paciente.
          schema:
            type: string # o integer
      responses:
        '200':
          description: Detalles del paciente obtenidos.
          content:
            application/json: # Devolvería el PatientResponse y listas de resúmenes de planes/biométricas
              schema:
                allOf:
                  - $ref: '#/components/schemas/PatientResponse'
                  - type: object
                    properties:
                      lastBiometricRecord: { $ref: '#/components/schemas/BiometricRecordResponse', nullable: true }
                      dietPlansSummary: { type: array, items: { type: object, properties: { id: {type: string}, title: {type: string}, isActive: {type: boolean} } } }
                      workoutPlansSummary: { type: array, items: { type: object, properties: { id: {type: string}, title: {type: string}, isActive: {type: boolean} } } }
        '401': { description: "No Autorizado.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '403': { description: "Prohibido (no es su paciente).", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '404': { description: "Paciente no encontrado.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '500': { description: "Error interno del servidor.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
    put:
      summary: HU-006 Actualización de Información del Paciente
      tags: [Patients]
      security:
        - bearerAuth: []
      parameters:
        - name: patientId
          in: path
          required: true
          description: ID del paciente a actualizar.
          schema:
            type: string # o integer
      requestBody:
        required: true
        content:
          application/json:
            schema: # Similar a PatientCreation, pero todos los campos son opcionales para PUT
              type: object
              properties:
                firstName: { type: string }
                lastName: { type: string }
                email: { type: string, format: email }
                # ... otros campos actualizables
      responses:
        '200':
          description: Paciente actualizado exitosamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientResponse'
        '400': { description: "Error de validación.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '401': { description: "No Autorizado.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '403': { description: "Prohibido.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '404': { description: "Paciente no encontrado.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '500': { description: "Error interno del servidor.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }

  # --- Biometric Record Endpoints ---
  /patients/{patientId}/biometric-records:
    post:
      summary: HU-010 Registro de Nuevas Medidas Biométricas
      tags: [BiometricRecords]
      security:
        - bearerAuth: []
      parameters:
        - name: patientId
          in: path
          required: true
          description: ID del paciente.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BiometricRecordCreation'
      responses:
        '201':
          description: Registro biométrico creado.
          content: { application/json: { schema: { $ref: '#/components/schemas/BiometricRecordResponse' } } }
        '400': { description: "Error de validación.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '401': { description: "No Autorizado.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '403': { description: "Prohibido.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '404': { description: "Paciente no encontrado.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '500': { description: "Error interno del servidor.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
    get:
      summary: HU-011 Visualización de la Evolución de Métricas (Listar todos los registros)
      tags: [BiometricRecords]
      security:
        - bearerAuth: []
      parameters:
        - name: patientId
          in: path
          required: true
          description: ID del paciente.
          schema:
            type: string
        - name: startDate
          in: query
          description: Fecha de inicio para filtrar registros.
          required: false
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          description: Fecha de fin para filtrar registros.
          required: false
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Lista de registros biométricos.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BiometricRecordResponse'
        '401': { description: "No Autorizado.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '403': { description: "Prohibido.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '404': { description: "Paciente no encontrado.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '500': { description: "Error interno del servidor.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }

  # --- Diet Plan Endpoints ---
  /patients/{patientId}/diet-plans: # Asumiendo anidado para creación
    post:
      summary: HU-012 Creación Básica de Plan de Dieta
      tags: [DietPlans]
      security:
        - bearerAuth: []
      parameters:
        - name: patientId
          in: path
          required: true
          description: ID del paciente para el cual se crea el plan.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DietPlanCreation'
      responses:
        '201':
          description: Plan de dieta creado.
          content: { application/json: { schema: { $ref: '#/components/schemas/DietPlanResponse' } } }
        '400': { description: "Error de validación.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '401': { description: "No Autorizado.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '403': { description: "Prohibido.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '404': { description: "Paciente no encontrado.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '500': { description: "Error interno del servidor.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }

  /diet-plans/{dietPlanId}: # No anidado para GET/PUT/DELETE, asume dietPlanId es único o la autorización maneja el contexto
    get:
      summary: HU-013 Visualización de Detalles de un Plan de Dieta
      tags: [DietPlans]
      security:
        - bearerAuth: []
      parameters:
        - name: dietPlanId
          in: path
          required: true
          description: ID del plan de dieta.
          schema:
            type: string
      responses:
        '200':
          description: Detalles del plan de dieta.
          content: { application/json: { schema: { $ref: '#/components/schemas/DietPlanResponse' } } }
        '401': { description: "No Autorizado.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '403': { description: "Prohibido.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '404': { description: "Plan de dieta no encontrado.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '500': { description: "Error interno del servidor.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
    put:
      summary: HU-014 Actualización de Información del Plan de Dieta
      tags: [DietPlans]
      security:
        - bearerAuth: []
      parameters:
        - name: dietPlanId
          in: path
          required: true
          description: ID del plan de dieta a actualizar.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: # Similar a DietPlanCreation, pero todos los campos son opcionales para PUT
              type: object
              properties:
                title: { type: string }
                description: { type: string }
                startDate: { type: string, format: date }
                endDate: { type: string, format: date }
                objectives: { type: string }
                status: { type: string, enum: ["Activo", "Borrador"] }
                notes: { type: string }
                meals:
                  type: array
                  items:
                    $ref: '#/components/schemas/DietMealCreation'
      responses:
        '200':
          description: Plan de dieta actualizado exitosamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DietPlanResponse'
        '400': { description: "Error de validación.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '401': { description: "No Autorizado.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '403': { description: "Prohibido.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '404': { description: "Plan de dieta no encontrado.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '500': { description: "Error interno del servidor.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
    delete:
      summary: HU-015 Eliminación de un Plan de Dieta
      tags: [DietPlans]
      security:
        - bearerAuth: []
      parameters:
        - name: dietPlanId
          in: path
          required: true
          description: ID del plan de dieta a eliminar.
          schema:
            type: string
      responses:
        '200':
          description: Plan de dieta eliminado exitosamente.
        '401': { description: "No Autorizado.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '403': { description: "Prohibido.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '404': { description: "Plan de dieta no encontrado.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '500': { description: "Error interno del servidor.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }

  # --- Workout Plan Endpoints ---
  /patients/{patientId}/workout-plans: # Asumiendo anidado para creación
    post:
      summary: HU-016 Creación Básica de Plan de Entrenamiento
      tags: [WorkoutPlans]
      security:
        - bearerAuth: []
      parameters:
        - name: patientId
          in: path
          required: true
          description: ID del paciente para el cual se crea el plan.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkoutPlanCreation'
      responses:
        '201':
          description: Plan de entrenamiento creado.
          content: { application/json: { schema: { $ref: '#/components/schemas/WorkoutPlanResponse' } } }
        '400': { description: "Error de validación.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '401': { description: "No Autorizado.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '403': { description: "Prohibido.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '404': { description: "Paciente no encontrado.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '500': { description: "Error interno del servidor.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }

  /workout-plans/{workoutPlanId}: # No anidado para GET/PUT/DELETE, asume workoutPlanId es único o la autorización maneja el contexto
    get:
      summary: HU-017 Visualización de Detalles de un Plan de Entrenamiento
      tags: [WorkoutPlans]
      security:
        - bearerAuth: []
      parameters:
        - name: workoutPlanId
          in: path
          required: true
          description: ID del plan de entrenamiento.
          schema:
            type: string
      responses:
        '200':
          description: Detalles del plan de entrenamiento.
          content: { application/json: { schema: { $ref: '#/components/schemas/WorkoutPlanResponse' } } }
        '401': { description: "No Autorizado.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '403': { description: "Prohibido.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '404': { description: "Plan de entrenamiento no encontrado.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '500': { description: "Error interno del servidor.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
    put:
      summary: HU-018 Actualización de Información del Plan de Entrenamiento
      tags: [WorkoutPlans]
      security:
        - bearerAuth: []
      parameters:
        - name: workoutPlanId
          in: path
          required: true
          description: ID del plan de entrenamiento a actualizar.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: # Similar a WorkoutPlanCreation, pero todos los campos son opcionales para PUT
              type: object
              properties:
                title: { type: string }
                description: { type: string }
                startDate: { type: string, format: date }
                endDate: { type: string, format: date }
                objectives: { type: string }
                status: { type: string, enum: ["Activo", "Borrador"] }
                notes: { type: string }
                days:
                  type: array
                  items:
                    $ref: '#/components/schemas/WorkoutDayCreation'
      responses:
        '200':
          description: Plan de entrenamiento actualizado exitosamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkoutPlanResponse'
        '400': { description: "Error de validación.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '401': { description: "No Autorizado.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '403': { description: "Prohibido.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '404': { description: "Plan de entrenamiento no encontrado.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '500': { description: "Error interno del servidor.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
    delete:
      summary: HU-019 Eliminación de un Plan de Entrenamiento
      tags: [WorkoutPlans]
      security:
        - bearerAuth: []
      parameters:
        - name: workoutPlanId
          in: path
          required: true
          description: ID del plan de entrenamiento a eliminar.
          schema:
            type: string
      responses:
        '200':
          description: Plan de entrenamiento eliminado exitosamente.
        '401': { description: "No Autorizado.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '403': { description: "Prohibido.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '404': { description: "Plan de entrenamiento no encontrado.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '500': { description: "Error interno del servidor.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }

  # --- PDF & Email Endpoints ---
  /patients/{patientId}/pdf:
    post:
      summary: HU-020 Generación de PDF de Planes
      tags: [PDF]
      security:
        - bearerAuth: []
      parameters:
        - name: patientId
          in: path
          required: true
          description: ID del paciente.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CombinedPdfRequest'
      responses:
        '200':
          description: PDF generado exitosamente.
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '400': { description: "Error de validación.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '401': { description: "No Autorizado.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '403': { description: "Prohibido.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '404': { description: "Paciente no encontrado.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '500': { description: "Error interno del servidor.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }

  /patients/{patientId}/email:
    post:
      summary: HU-021 Envío de Correo Electrónico con Planes
      tags: [Email]
      security:
        - bearerAuth: []
      parameters:
        - name: patientId
          in: path
          required: true
          description: ID del paciente.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailRequest'
      responses:
        '200':
          description: Correo electrónico enviado exitosamente.
        '400': { description: "Error de validación.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '401': { description: "No Autorizado.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '403': { description: "Prohibido.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '404': { description: "Paciente no encontrado.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '500': { description: "Error interno del servidor.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }

  # --- General Error Schema ---
  /error:
    get:
      summary: HU-022 Visualización de Información de Error
      tags: [Error]
      responses:
        '200':
          description: Información de error obtenida exitosamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' 